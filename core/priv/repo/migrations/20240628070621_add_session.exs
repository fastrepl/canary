defmodule Canary.Repo.Migrations.AddSession do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sessions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :discord_id, :bigint
      add :web_id, :text

      add :account_id,
          references(:accounts,
            column: :id,
            name: "sessions_account_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:sessions, [:account_id, :discord_id],
             name: "sessions_unique_discord_index"
           )

    create unique_index(:sessions, [:account_id, :web_id], name: "sessions_unique_web_index")

    create table(:session_messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :session_id,
          references(:sessions,
            column: :id,
            name: "session_messages_session_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :role, :text, null: false
      add :content, :text, null: false
    end
  end

  def down do
    drop constraint(:session_messages, "session_messages_session_id_fkey")

    drop table(:session_messages)

    drop_if_exists unique_index(:sessions, [:account_id, :web_id],
                     name: "sessions_unique_web_index"
                   )

    drop_if_exists unique_index(:sessions, [:account_id, :discord_id],
                     name: "sessions_unique_discord_index"
                   )

    drop constraint(:sessions, "sessions_account_id_fkey")

    drop table(:sessions)
  end
end
