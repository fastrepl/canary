defmodule Canary.Repo.Migrations.InitAsh do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:sources, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :account_id, :uuid, null: false
      add :type, :text
      add :last_fetched_at, :utc_datetime_usec
      add :web_base_url, :text
    end

    create table(:source_documents, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :updated_at, :utc_datetime_usec

      add :source_id,
          references(:sources,
            column: :id,
            name: "source_documents_source_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :source_url, :text
      add :content, :text
      add :content_hash, :binary
      add :content_embedding, :vector
    end

    create unique_index(:source_documents, [:source_id, :content_hash],
             name: "source_documents_unique_content_index"
           )

    create table(:clients, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :account_id, :uuid, null: false
      add :type, :text
      add :web_base_url, :text
      add :web_public_key, :text, default: fragment("gen_random_uuid()")
    end

    create table(:accounts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:sources) do
      modify :account_id,
             references(:accounts,
               column: :id,
               name: "sources_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:clients) do
      modify :account_id,
             references(:accounts,
               column: :id,
               name: "clients_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:accounts) do
      add :user_id, :uuid, null: false
      add :name, :text, null: false
    end

    create table(:account_users, primary_key: false) do
      add :user_id,
          references(:users,
            column: :id,
            name: "account_users_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :account_id,
          references(:accounts,
            column: :id,
            name: "account_users_account_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint(:account_users, "account_users_user_id_fkey")

    drop constraint(:account_users, "account_users_account_id_fkey")

    drop table(:account_users)

    alter table(:accounts) do
      remove :name
      remove :user_id
    end

    drop constraint(:clients, "clients_account_id_fkey")

    alter table(:clients) do
      modify :account_id, :uuid
    end

    drop constraint(:sources, "sources_account_id_fkey")

    alter table(:sources) do
      modify :account_id, :uuid
    end

    drop table(:accounts)

    drop table(:clients)

    drop_if_exists unique_index(:source_documents, [:source_id, :content_hash],
                     name: "source_documents_unique_content_index"
                   )

    drop constraint(:source_documents, "source_documents_source_id_fkey")

    drop table(:source_documents)

    drop table(:sources)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
